@document.meta
title: lsp
description: Lsp config for Neovim
authors: nils
categories: 
created: 2023-09-05
updated: 2024-02-18T23:11:57+0100
version: 0.0.1
tangle: ~/.config/nvim/lua/lsp.lua
@end

* Mason
  @code lua
  require('mason').setup()
  require('mason-lspconfig').setup()
  require('mason-lspconfig').setup_handlers{
  	function(server_name)
  		require('lspconfig')[server_name].setup{}
  	end,
	  ["jdtls"] = function() end,
  }
  @end
  Setup Mason to install Lsp's and set them up

* Lsp diagnostics
  @code lua
  local sign = function(opts)
  	vim.fn.sign_define(opts.name, {
  		texthl = opts.name,
  		text = opts.text,
  		numhl = ''
  	})
  end

  sign({name = 'DiagnosticSignError', text = ''})
  sign({name = 'DiagnosticSignWarn', text = ''})
  sign({name = 'DiagnosticSignHint', text = ''})
  sign({name = 'DiagnosticSignInfo', text = ''})
  @end
  Set's Symbols for Lsp diagnostics.

  @code lua
  vim.diagnostic.config({
      virtual_text = true,
      signs = true,
      update_in_insert = true,
      underline = true,
      severity_sort = false,
      float = {
          border = 'rounded',
          source = 'always',
          header = '',
          prefix = '',
      },
  })
  @end
  Set what is shown with the diagnostics and how.

* Completion
  @code lua
  local has_words_before = function()
    unpack = unpack or table.unpack
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end
  @end
  No fucking clue.

** Luasnip
   a
   @code lua
   local cmp = require'cmp'
   local luasnip = require('luasnip')
   cmp.setup({
     snippet = {
       expand = function(args)
           -- vim.fn["vsnip#anonymous"](args.body)
   		luasnip.lsp_expand(args.body)
       end,
     },
   @end
   Enable luasnip.

** Key mapping
   @code lua
     mapping = {
       ['<C-p>'] = cmp.mapping.select_prev_item(),
       ['<C-n>'] = cmp.mapping.select_next_item(),
       -- Add tab support
       -- ['<S-Tab>'] = cmp.mapping.select_prev_item(),
       -- ['<Tab>'] = cmp.mapping.select_next_item(),
       ['<C-S-f>'] = cmp.mapping.scroll_docs(-4),
       ['<C-f>'] = cmp.mapping.scroll_docs(4),
       ['<C-Space>'] = cmp.mapping.complete(),
       ['<C-e>'] = cmp.mapping.close(),
       ['<CR>'] = cmp.mapping.confirm({
         behavior = cmp.ConfirmBehavior.Insert,
         select = true,
       }),
   	["<Tab>"] = cmp.mapping(function(fallback)
         if cmp.visible() then
           cmp.select_next_item()
         -- You could replace the expand_or_jumpable() calls with expand_or_locally_jumpable() 
         -- they way you will only jump inside the snippet region
         elseif luasnip.expand_or_jumpable() then
           luasnip.expand_or_jump()
         elseif has_words_before() then
           cmp.complete()
         else
           fallback()
         end
       end, { "i", "s" }),
   
       ["<S-Tab>"] = cmp.mapping(function(fallback)
         if cmp.visible() then
           cmp.select_prev_item()
         elseif luasnip.jumpable(-1) then
           luasnip.jump(-1)
         else
           fallback()
         end
       end, { "i", "s" }),
     },
   @end
   C-p 		- previuse Item in popup
   C-n 		- next Item in popup
   C-S-f 	- scroll docs 4 up
   C-f 		- scroll docs 4 down
   C-Space 	- complete
   C-e 		- close completion popup
   CR(Enter)- Confirm choise
   Tab 		- Next Item in popup
   S-Tab 	- previuse item in Popup


   @code lua
     -- Installed sources:
     sources = {
   	   { name = 'luasnip' },
       { name = 'path' },                              -- file paths
       { name = 'nvim_lsp', keyword_length = 2 },      -- from language server
       { name = 'nvim_lsp_signature_help'},            -- display function signatures with current parameter emphasized
       { name = 'nvim_lua', keyword_length = 2},       -- complete neovim's Lua runtime API such vim.lsp.*
       { name = 'buffer', keyword_length = 2 },        -- source current buffer
       { name = 'vsnip', keyword_length = 2 },         -- nvim-cmp source for vim-vsnip 
       { name = 'calc'},                               -- source for math calculation
       { name = 'cody' },
     },
   @end
   Source the shown words from:
   - luasnip
   - path
   - the attached lsp
   - function signatures
   - neovims lua api
   - buffer
   - vsnip
   - math



   @code lua
    window = {
        completion = cmp.config.window.bordered(),
        documentation = cmp.config.window.bordered(),
    },
    formatting = {
        fields = {'menu', 'abbr', 'kind'},
        format = function(entry, item)
            local menu_icon ={
                nvim_lsp = 'λ',
                vsnip = '⋗',
                buffer = 'Ω',
                path = '',
            }
            item.menu = menu_icon[entry.source.name]
            return item
        end,
    },
   })
   @end
   Designe of the popup


* Treesitter
  @code lua
  require('nvim-treesitter.configs').setup {
    ensure_installed = { 'lua', 'c', 'java' },
    auto_install = true,
    highlight = {
      enable = true,
      -- disable = {'latex'},
      additional_vim_regex_highlighting=false,
    },
    ident = { enable = true },
    rainbow = {
      enable = true,
      extended_mode = true,
      max_file_lines = nil,
    }
  }
  @end
  Settings for treesitter.

  @code lua
  
  
  local npairs = require("nvim-autopairs")
  local Rule = require('nvim-autopairs.rule')
  
  npairs.setup({
      check_ts = true,
      ts_config = {
      }
  })
  
  local ts_conds = require('nvim-autopairs.ts-conds')
  
  
  -- press % => %% only while inside a comment or string
  npairs.add_rules({
    Rule("%", "%", "lua")
      :with_pair(ts_conds.is_ts_node({'string','comment'})),
    Rule("$", "$", "lua")
      :with_pair(ts_conds.is_not_ts_node({'function'}))
  })
  @end
